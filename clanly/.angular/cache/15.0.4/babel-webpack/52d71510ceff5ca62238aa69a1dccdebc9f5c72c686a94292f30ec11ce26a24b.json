{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nlet CreateformComponent = class CreateformComponent {\n  constructor(auth) {\n    this.auth = auth;\n    this.signupForm = new FormGroup({});\n  }\n  ngOnInit() {\n    this.signupForm = new FormGroup({\n      username: new FormControl(),\n      email: new FormControl(),\n      name: new FormControl(),\n      password: new FormControl(),\n      password2: new FormControl()\n    });\n  }\n  signUp() {\n    const user = this.signupForm.value;\n    if (user.password !== user.password2) {\n      this.signupForm = new FormGroup({\n        username: user.username,\n        email: user.email,\n        name: user.name,\n        password: new FormControl(),\n        password2: new FormControl()\n      });\n      alert(\"Passwords don't match\");\n    } else {\n      this.auth.signup(user.username, user.email, user.name, user.password).subscribe(data => {\n        if (data.hasOwnProperty('error')) {\n          this.signupForm = new FormGroup({\n            username: new FormControl(),\n            email: new FormControl(),\n            name: new FormControl(),\n            password: new FormControl(),\n            password2: new FormControl()\n          });\n          alert(data.error);\n        } else {\n          console.log(data);\n          sessionStorage.setItem('token', data.token);\n          sessionStorage.setItem('username', data.username);\n          sessionStorage.setItem('id', data.id);\n          this.router.navigate(['/home']);\n        }\n      });\n    }\n  }\n};\nCreateformComponent = __decorate([Component({\n  selector: 'app-createform',\n  templateUrl: './createform.component.html',\n  styleUrls: ['./createform.component.css']\n})], CreateformComponent);\nexport { CreateformComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,SAAS,EAAEC,WAAW,QAAQ,gBAAgB;AAQhD,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BC,YAAoBC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IAFxB,eAAU,GAAc,IAAIJ,SAAS,CAAC,EAAE,CAAC;EAEA;EAEzCK,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAIN,SAAS,CAAC;MAC9BO,QAAQ,EAAE,IAAIN,WAAW,EAAE;MAC3BO,KAAK,EAAE,IAAIP,WAAW,EAAE;MACxBQ,IAAI,EAAE,IAAIR,WAAW,EAAE;MACvBS,QAAQ,EAAE,IAAIT,WAAW,EAAE;MAC3BU,SAAS,EAAE,IAAIV,WAAW;KAC3B,CAAC;EACJ;EAEAW,MAAM;IACJ,MAAMC,IAAI,GAAG,IAAI,CAACP,UAAU,CAACQ,KAAK;IAElC,IAAID,IAAI,CAACH,QAAQ,KAAKG,IAAI,CAACF,SAAS,EAAE;MACpC,IAAI,CAACL,UAAU,GAAG,IAAIN,SAAS,CAAC;QAC9BO,QAAQ,EAAEM,IAAI,CAACN,QAAQ;QACvBC,KAAK,EAAEK,IAAI,CAACL,KAAK;QACjBC,IAAI,EAAEI,IAAI,CAACJ,IAAI;QACfC,QAAQ,EAAE,IAAIT,WAAW,EAAE;QAC3BU,SAAS,EAAE,IAAIV,WAAW;OAC3B,CAAC;MACFc,KAAK,CAAC,uBAAuB,CAAC;KAC/B,MACI;MACH,IAAI,CAACX,IAAI,CAACY,MAAM,CAACH,IAAI,CAACN,QAAQ,EAAEM,IAAI,CAACL,KAAK,EAAEK,IAAI,CAACJ,IAAI,EAAEI,IAAI,CAACH,QAAQ,CAAC,CAACO,SAAS,CAACC,IAAI,IAAG;QACrF,IAAIA,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,EAAE;UAChC,IAAI,CAACb,UAAU,GAAG,IAAIN,SAAS,CAAC;YAC9BO,QAAQ,EAAE,IAAIN,WAAW,EAAE;YAC3BO,KAAK,EAAE,IAAIP,WAAW,EAAE;YACxBQ,IAAI,EAAE,IAAIR,WAAW,EAAE;YACvBS,QAAQ,EAAE,IAAIT,WAAW,EAAE;YAC3BU,SAAS,EAAE,IAAIV,WAAW;WAC3B,CAAC;UACFc,KAAK,CAACG,IAAI,CAACE,KAAK,CAAC;SAClB,MACI;UACHC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;UACjBK,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,KAAK,CAAC;UAC3CF,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEN,IAAI,CAACX,QAAQ,CAAC;UACjDgB,cAAc,CAACC,OAAO,CAAC,IAAI,EAAEN,IAAI,CAACQ,EAAE,CAAC;UACrC,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAEnC,CAAC;;EAEL;CAED;AApDY1B,mBAAmB,eAL/BH,SAAS,CAAC;EACT8B,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW7B,mBAAmB,CAoD/B;SApDYA,mBAAmB","names":["Component","FormGroup","FormControl","CreateformComponent","constructor","auth","ngOnInit","signupForm","username","email","name","password","password2","signUp","user","value","alert","signup","subscribe","data","hasOwnProperty","error","console","log","sessionStorage","setItem","token","id","router","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/gui/TPW/tpw-projeto2/clanly/src/app/components/signup/createform/createform.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-createform',\n  templateUrl: './createform.component.html',\n  styleUrls: ['./createform.component.css']\n})\nexport class CreateformComponent {\n\n  signupForm: FormGroup = new FormGroup({});\n  \n  constructor(private auth: AuthService) { }\n  \n  ngOnInit() {\n    this.signupForm = new FormGroup({\n      username: new FormControl(),\n      email: new FormControl(),\n      name: new FormControl(),\n      password: new FormControl(),\n      password2: new FormControl()\n    });\n  }\n\n  signUp() {\n    const user = this.signupForm.value;\n\n    if (user.password !== user.password2) {\n      this.signupForm = new FormGroup({\n        username: user.username,\n        email: user.email,\n        name: user.name,\n        password: new FormControl(),\n        password2: new FormControl()\n      });\n      alert(\"Passwords don't match\");\n    }\n    else {\n      this.auth.signup(user.username, user.email, user.name, user.password).subscribe(data => {\n        if (data.hasOwnProperty('error')) {\n          this.signupForm = new FormGroup({\n            username: new FormControl(),\n            email: new FormControl(),\n            name: new FormControl(),\n            password: new FormControl(),\n            password2: new FormControl()\n          });\n          alert(data.error);\n        }\n        else {\n          console.log(data);\n          sessionStorage.setItem('token', data.token);\n          sessionStorage.setItem('username', data.username);\n          sessionStorage.setItem('id', data.id);\n          this.router.navigate(['/home']);\n        }\n      }\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}