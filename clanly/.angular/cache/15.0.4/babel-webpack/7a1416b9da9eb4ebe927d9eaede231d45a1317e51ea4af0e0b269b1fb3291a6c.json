{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api-service.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(api, router) {\n    this.api = api;\n    this.router = router;\n  }\n  login(username, password) {\n    return this.api.authenticate({\n      username,\n      password\n    });\n  }\n  signup(username, email, name, password) {\n    return this.api.signup({\n      username,\n      email,\n      name,\n      password\n    });\n  }\n  canActivate(route) {\n    if (sessionStorage.getItem('token')) {\n      console.log(rout);\n      this.api.validateToken().subscribe(data => {\n        if (!data.valid) {\n          alert(\"Your session has expired. Please login again.\");\n          sessionStorage.clear();\n          this.router.navigate(['/login']);\n          return false;\n        }\n        if (route.routeConfig && (route.routeConfig.path === 'login' || route.routeConfig.path === 'signup')) {\n          this.router.navigate(['/home']);\n          return false;\n        }\n        return true;\n      });\n    } else if (route.routeConfig && (route.routeConfig.path === 'login' || route.routeConfig.path === 'signup')) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n  logout() {\n    const token = sessionStorage.getItem('token');\n    sessionStorage.clear();\n    this.router.navigate(['/login']);\n    this.api.logout({\n      token\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,GAAe,EAAUC,MAAc;IAAvC,QAAG,GAAHD,GAAG;IAAsB,WAAM,GAANC,MAAM;EAAY;EAE/DC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,GAAG,CAACK,YAAY,CAAC;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACtD;EAEAE,MAAM,CAACH,QAAgB,EAAEI,KAAa,EAAEC,IAAY,EAAEJ,QAAgB;IACpE,OAAO,IAAI,CAACJ,GAAG,CAACM,MAAM,CAAC;MAAEH,QAAQ;MAAEI,KAAK;MAAEC,IAAI;MAAEJ;IAAQ,CAAE,CAAC;EAC7D;EAEAK,WAAW,CAACC,KAA6B;IACvC,IAAIC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;MACjB,IAAI,CAACf,GAAG,CAACgB,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;QAC/C,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;UACfC,KAAK,CAAC,+CAA+C,CAAC;UACtDT,cAAc,CAACU,KAAK,EAAE;UACtB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC,OAAO,KAAK;;QAEd,IAAIZ,KAAK,CAACa,WAAW,KAAKb,KAAK,CAACa,WAAW,CAACC,IAAI,KAAK,OAAO,IAAId,KAAK,CAACa,WAAW,CAACC,IAAI,KAAK,QAAQ,CAAC,EAAE;UACpG,IAAI,CAACvB,MAAM,CAACqB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;UAC/B,OAAO,KAAK;;QAEd,OAAO,IAAI;MACb,CAAC,CAAC;KACH,MACI,IAAIZ,KAAK,CAACa,WAAW,KAAKb,KAAK,CAACa,WAAW,CAACC,IAAI,KAAK,OAAO,IAAId,KAAK,CAACa,WAAW,CAACC,IAAI,KAAK,QAAQ,CAAC,EAAE;MACzG,OAAO,IAAI;;IAEb,IAAI,CAACvB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;EAEAG,MAAM;IACJ,MAAMC,KAAK,GAAGf,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7CD,cAAc,CAACU,KAAK,EAAE;IACtB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,IAAI,CAACtB,GAAG,CAACyB,MAAM,CAAC;MAAEC;IAAK,CAAE,CAAC;EAC5B;;AAzCW5B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["AuthService","constructor","api","router","login","username","password","authenticate","signup","email","name","canActivate","route","sessionStorage","getItem","console","log","rout","validateToken","subscribe","data","valid","alert","clear","navigate","routeConfig","path","logout","token","factory","providedIn"],"sourceRoot":"","sources":["/home/gui/TPW/tpw-projeto2/clanly/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api-service.service';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements CanActivate{\n\n  constructor(private api: ApiService, private router: Router) { }\n\n  login(username: string, password: string): Observable<any> {\n    return this.api.authenticate({ username, password });\n  }\n\n  signup(username: string, email: string, name: string, password: string): Observable<any> {\n    return this.api.signup({ username, email, name, password });\n  }\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    if (sessionStorage.getItem('token')) {\n      console.log(rout)\n      this.api.validateToken().subscribe((data: any) => {\n        if (!data.valid) {\n          alert(\"Your session has expired. Please login again.\");\n          sessionStorage.clear();\n          this.router.navigate(['/login']);\n          return false;\n        }\n        if (route.routeConfig && (route.routeConfig.path === 'login' || route.routeConfig.path === 'signup')) {\n          this.router.navigate(['/home']);\n          return false;\n        }\n        return true;\n      });\n    }\n    else if (route.routeConfig && (route.routeConfig.path === 'login' || route.routeConfig.path === 'signup')) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n  logout() {\n    const token = sessionStorage.getItem('token');\n    sessionStorage.clear();\n    this.router.navigate(['/login']);\n    this.api.logout({ token });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}