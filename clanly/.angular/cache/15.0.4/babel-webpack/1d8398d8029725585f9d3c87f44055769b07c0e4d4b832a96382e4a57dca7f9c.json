{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nlet BigformComponent = class BigformComponent {\n  constructor(api, auth, router) {\n    this.api = api;\n    this.auth = auth;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.editForm = new FormGroup({\n      name: new FormControl(),\n      desc: new FormControl(),\n      password: new FormControl(),\n      password2: new FormControl(),\n      password3: new FormControl()\n    });\n    const token = sessionStorage.getItem(\"token\");\n    if (this.type === \"user\") {\n      this.api.getBasicProfile(token).subscribe(data => {\n        this.editForm.controls.name.setValue(data.name);\n        this.editForm.controls.desc.setValue(data.bio);\n      });\n    } else if (this.type === \"clan\") {}\n  }\n  onImgChange(event) {\n    this.img = event.target.files[0];\n  }\n  onBackgroundImgChange(event) {\n    this.background_img = event.target.files[0];\n  }\n  onSubmit() {\n    if (this.type === \"user\") {\n      if (!this.editForm.value.password) {\n        alert(\"Please enter your password\");\n      } else if ((this.editForm.value.password2 || this.editForm.value.password3) && this.editForm.value.password2 !== this.editForm.value.password3) {\n        alert(\"Passwords do not match\");\n      } else {\n        let header = {\n          name: this.editForm.value.name,\n          bio: this.editForm.value.desc,\n          password: this.editForm.value.password\n        };\n        if (this.editForm.value.password2) {\n          header.new_password = this.editForm.value.password2;\n        }\n        if (this.img) {\n          let reader = new FileReader();\n          reader.readAsDataURL(this.img);\n          reader.onload = () => {\n            header.img = [reader.result, this.img.name];\n            if (this.background_img) {\n              let reader2 = new FileReader();\n              reader2.readAsDataURL(this.background_img);\n              reader2.onload = () => {\n                header.background_img = [reader2.result, this.background_img.name];\n                this.api_call(header);\n              };\n            } else {\n              this.api_call(header);\n            }\n          };\n        }\n        if (this.background_img) {\n          let reader = new FileReader();\n          reader.readAsDataURL(this.background_img);\n          reader.onload = () => {\n            header.background_img = [reader.result, this.background_img.name];\n            if (this.img) {\n              let reader2 = new FileReader();\n              reader2.readAsDataURL(this.img);\n              reader2.onload = () => {\n                header.img = [reader2.result, this.img.name];\n                this.api_call(header);\n              };\n            } else {\n              this.api_call(header);\n            }\n          };\n        }\n      }\n    } else if (this.type === \"clan\") {}\n  }\n  api_call(header) {\n    if (this.type === \"user\") {\n      this.api.updateProfile(header).subscribe(data => {\n        if (data.hasOwnProperty('error')) {\n          alert(data.error);\n        } else {\n          alert(data.success);\n          if (this.editForm.value.password2) {\n            this.auth.logout();\n            return;\n          }\n          window.location.reload();\n        }\n      });\n    } else if (this.type === \"clan\") {\n      this.api.createClan(header).subscribe(data => {\n        if (data.hasOwnProperty('error')) {\n          alert(data.error);\n        } else {\n          alert(data.success);\n          this.ro;\n        }\n      });\n    }\n  }\n};\n__decorate([Input()], BigformComponent.prototype, \"type\", void 0);\nBigformComponent = __decorate([Component({\n  selector: 'app-bigform',\n  templateUrl: './bigform.component.html',\n  styleUrls: ['./bigform.component.css']\n})], BigformComponent);\nexport { BigformComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","FormGroup","FormControl","BigformComponent","constructor","api","auth","router","ngOnInit","editForm","name","desc","password","password2","password3","token","sessionStorage","getItem","type","getBasicProfile","subscribe","data","controls","setValue","bio","onImgChange","event","img","target","files","onBackgroundImgChange","background_img","onSubmit","value","alert","header","new_password","reader","FileReader","readAsDataURL","onload","result","reader2","api_call","updateProfile","hasOwnProperty","error","success","logout","window","location","reload","createClan","ro","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/gui/TPW/tpw-projeto2/clanly/src/app/components/bigform/bigform.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api-service.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-bigform',\n  templateUrl: './bigform.component.html',\n  styleUrls: ['./bigform.component.css']\n})\nexport class BigformComponent implements OnInit {\n  @Input() type?: string;\n  editForm: FormGroup | any;\n  img: File | any;\n  background_img: File | any;\n\n  constructor(private api: ApiService, private auth: AuthService, private router: ) { }\n\n  ngOnInit() {\n\n    this.editForm = new FormGroup({\n      name: new FormControl(),\n      desc: new FormControl(),\n      password: new FormControl(),\n      password2: new FormControl(),\n      password3: new FormControl(),\n    });\n\n    const token = sessionStorage.getItem(\"token\");\n    if (this.type === \"user\") {\n      this.api.getBasicProfile(token).subscribe((data: any) => {\n        this.editForm.controls.name.setValue(data.name);\n        this.editForm.controls.desc.setValue(data.bio);\n      });\n    } else if (this.type === \"clan\") {\n    }\n  }\n\n  onImgChange(event: any) {\n    this.img = event.target.files[0];\n  }\n\n  onBackgroundImgChange(event: any) {\n    this.background_img = event.target.files[0];\n  }\n\n  onSubmit() {\n    if (this.type === \"user\") {\n      if (!this.editForm.value.password) {\n        alert(\"Please enter your password\");\n      }\n      else if ((this.editForm.value.password2 || this.editForm.value.password3) && this.editForm.value.password2 !== this.editForm.value.password3) {\n        alert(\"Passwords do not match\");\n      }\n      else {\n        let header: {name: string, bio: string, password: string, new_password?: string, img?:any, background_img?:any, token?: any} = {\n          name: this.editForm.value.name,\n          bio: this.editForm.value.desc,\n          password: this.editForm.value.password,\n        };\n        if (this.editForm.value.password2) {\n          header.new_password = this.editForm.value.password2;\n        }\n        if (this.img) {\n          let reader = new FileReader();\n          reader.readAsDataURL(this.img);\n          reader.onload = () => {\n            header.img = [reader.result as string, this.img.name];\n            if (this.background_img) {\n              let reader2 = new FileReader();\n              reader2.readAsDataURL(this.background_img);\n              reader2.onload = () => {\n                header.background_img = [reader2.result as string, this.background_img.name];\n                this.api_call(header);\n              }\n            }\n            else {\n              this.api_call(header);\n            }\n          }\n        }\n        if (this.background_img) {\n          let reader = new FileReader();\n          reader.readAsDataURL(this.background_img);\n          reader.onload = () => {\n            header.background_img = [reader.result as string, this.background_img.name];\n            if (this.img) {\n              let reader2 = new FileReader();\n              reader2.readAsDataURL(this.img);\n              reader2.onload = () => {\n                header.img = [reader2.result as string, this.img.name];\n                this.api_call(header);\n              }\n            }\n            else {\n              this.api_call(header);\n            }\n          }\n        }\n      }\n    } else if (this.type === \"clan\") {\n    }\n  }\n\n  api_call(header: any) {\n    if (this.type === \"user\") {\n      this.api.updateProfile(header).subscribe((data: any) => {\n        if (data.hasOwnProperty('error')) {\n          alert(data.error);\n        }\n        else {\n          alert(data.success);\n          if (this.editForm.value.password2) {\n            this.auth.logout();\n            return;\n          }\n          window.location.reload();\n        }\n      });\n    } else if (this.type === \"clan\") {\n      this.api.createClan(header).subscribe((data: any) => {\n        if (data.hasOwnProperty('error')) {\n          alert(data.error);\n        }\n        else {\n          alert(data.success);\n          this.ro\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}